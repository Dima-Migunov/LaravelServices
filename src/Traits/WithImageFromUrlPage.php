<?php

namespace Migunov\Services\Traits;

use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Migunov\Services\Helper;
use Migunov\Services\ImageService;

trait WithImageFromUrlPage
{
    /**
     * Save main image of a website page.
     *
     * @param string $url    URL to download an image
     * @param string $path   Path to save an image
     * @param array  $params [
     *                       0 => [
     *                       'name' => null, // autogenerated if null.
     *                       'width' => 1200,
     *                       'height' => 600,
     *                       ],
     *                       [
     *                       'name' => null, // from [0]['name'] if null.
     *                       'postfix' => '.preview.jpg' // required.
     *                       'width' => 400,
     *                       'height' => 400,
     *                       ],
     *                       [
     *                       'name' => null, // from [0]['name'] if null.
     *                       'postfix' => '.mini.jpg' // required.
     *                       'width' => 64,
     *                       'height' => 64,
     *                       ],
     *                       ]
     *
     * @return void
     */
    public static function saveImageFromUrlPage(
        string $url,
        string $path,
        array $params
    ): ?array {
        $meta = Helper::getMetaTags($url);

        if (empty($meta['og:image'])) {
            return null;
        }

        $res = Helper::httpClient()->get($meta['og:image']);

        $pathImage = $path . '/' . ($params[0]['name'] ?? Str::random(16))
                        . self::extFromUrl($meta['og:image']);

        $paths = [$pathImage];

        foreach ($params as $i => $img) {
            if ($i == 0) {
                Storage::disk('public')->put($pathImage, $res->body());
                ImageService::resize($pathImage, $img['width'], $img['height']);
                continue;
            }

            $pathImagePostfix = $pathImage . $img['postfix'];
            $paths[] = $pathImagePostfix;
            Storage::disk('public')->put($pathImagePostfix, $res->body());
            ImageService::resize($pathImagePostfix, $img['width'], $img['height']);
        }

        $res->close();

        return $paths;
    }

    private static function extFromUrl(string $url): string
    {
        $url = explode('?', trim($url))[0];
        return preg_replace('#.+(\..*)$#', '$1', $url);
    }
}
